<!DOCTYPE html>
<html lang="ko" ng-app="mySuperApp">
<head>
    <link rel="stylesheet" href="calendar.css">
    <link rel="stylesheet" href="calendar.js">


  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.12.1/css/all.css">
  
  <!-- prev, next icon -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  
  <!-- title font -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Anton+SC&family=Archivo+Black&family=Bebas+Neue&display=swap" rel="stylesheet">
  
  <!-- calendar font -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Anton+SC&family=Archivo+Black&family=Bebas+Neue&family=Inter+Tight:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
  
  <!-- todolist_font -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Anton+SC&family=Archivo+Black&family=Bebas+Neue&family=Inter+Tight:ital,wght@0,100..900;1,100..900&family=Nanum+Gothic:wght@400;700;800&family=Sora:wght@100..800&display=swap" rel="stylesheet">
  
  <!-- todolist_font_ko -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Nanum+Gothic:wght@400;700;800&display=swap" rel="stylesheet">
  </head>
  

<style>
/* Event_Registration.css */



  /* 헤더 카피 start */
/* ul 스타일 */
#menu-list {
    list-style-type: none; /* 기본 리스트 스타일 제거 */
    padding: 0;
    margin: 0;
    background-color: #000; /* 배경색 검은색 */
    display: flex; /* Flexbox 사용 */
    justify-content: space-around; /* 항목 간 여백 균일하게 */
    align-items: center; /* 항목을 수직 가운데 정렬 */
    border: 1px solid #000; /* 테두리 (검은색) */
    transform:translate(-100px);
    gap:20px;
  }

  /* li 스타일 */
  .menu-item {
    padding: 10px;
  }

  .menu-item a {
    text-decoration: none; /* 밑줄 제거 */
    color: #fff; /* 텍스트 색상 흰색 */
    display: block; /* 전체 영역 클릭 가능 */
    
  }

  .menu-item a:hover {
    /* hover 효과 제거 */
  }

/* 헤더 카피 end */






#wrapper2 {
  text-align: center;
position:relative;
top:-25px;
}

.num 
{
cursor: pointer;
color: red;
margin-left: 10px;
}

.Button 
{
/*

*/
  font-family: Helvetica, Arial, sans-serif;
  font-size: 13px;
  padding: 5px 10px;
  border: 1px solid #aaa;
  background-color: pink;
  color: #666;
  text-decoration: none;
  cursor: pointer;
}

.overlay 
{
  position: absolute;
  top: 0;
  bottom: 0;
left: 0;
right: 0;
background: rgba(0,0,0,0.5);
  transition: opacity 200ms;
visibility: hidden;
  opacity: 0;

/* 아무데나 눌러도 나갈 수 있게 */
.cancel 
{
  position: absolute;
  width: 100%;
  height: 100%;
  cursor: default;
}

&:target 
{
  visibility: visible;
  opacity: 1;
}
}

.popup {
  margin: 75px auto;
  padding: 20px;
  background: #fff;
  border: 1px solid #666;
  width: 300px;
top:100px;
  box-shadow: 0 0 50px rgba(0,0,0,0.5);
  position: relative;

h2 {
  margin-top: 0;
  color: #666;
  font-family: "Trebuchet MS", Tahoma, Arial, sans-serif;
  font-size : 28px; 
  /* 추가 */
}

.close {
  position: absolute;
  width: 20px;
  height: 20px;
  top: 20px;
  right: 20px;
  opacity: 0.8;
  transition: all 200ms;
  font-size: 24px;
  font-weight: bold;
  text-decoration: none;
  color: #666;
  &:hover {
    opacity: 1;
  }
}
}



/* font.css */

.nanum-gothic-regular {
font-family: "Nanum Gothic", sans-serif;
font-weight: 400;
font-style: normal;
}

.nanum-gothic-bold {
font-family: "Nanum Gothic", sans-serif;
font-weight: 700;
font-style: normal;
}

.nanum-gothic-extrabold {
font-family: "Nanum Gothic", sans-serif;
font-weight: 800;
font-style: normal;
}

.archivo-black-regular {
font-family: "Archivo Black", sans-serif;
font-weight: 400;
font-style: normal;
}

.inter-tight {
font-family: "Inter Tight", sans-serif;
font-optical-sizing: auto;
font-weight: 200;
font-style: normal;
}



/* reset.css */

body 
{
max-width : 1920px;
max-height : 960px;
margin:0;
  padding:0;
  font-family: 'Roboto', sans-serif;
background-color:black;

}

h1, h2, h3, h4, h5, h6, div, p, dl, dt, dd, ul, ol, li, form, fieldset, blockquote, address, table, thead, tbody, tfoot, tr, td, caption 
{
  margin:0;
  padding:0;
list-style:none;
}



.input-btn 
{
width: 70px;
height: 35px;
border: none;
border-radius: 10%;
font-family: "Inter Tight", sans-serif;
font-size: 15px;
font-weight: 600;
margin-right: 30px;
cursor:pointer;
background: rgb(255, 255, 255); 
}

header 
{
display: flex;
height: 5%; 
box-sizing: border-box;
padding: 30px;
}

header > h1 
{
display: inline-block;
height: 100%;
transform:translate(10px);
flex-grow: 1;
}

header > h1 > span 
{
font-family: "Archivo Black", sans-serif;
font-size : 32px; /* 추가 */
font-weight: 400; 
color: #a7a7a7; 
vertical-align: center;
}

.calendar_title 
{
margin: 0 auto; 
flex-grow: 0;
}

.calendar_title .prev , .next
{
width: 30px;
height: 100%;
border: none;
font-size: 20px;
background-color:black;
color: #5c5c5c;
outline: none;
cursor: pointer;
}

.calendar_title .current-year-month 
{
display: inline-block;
font-family: "Archivo Black", sans-serif;
font-size: 24px;
margin: 0 20px;
color: rgb(255, 255, 255);
}

.content-left 
{
width: 20%;
float: right;
background-color:black; /*F5F5F5 : 통합양식 버전인듯*/ 
/* 추가 */
}

.left-main 
{
margin-top: 10%;
}

.left-main .main-wrap 
{
text-align: center;
font-weight: 700;
}

.left-main .todo-wrap 
{
padding: 20% 0 10% 10%;
}

.left-main .todo-wrap .todo-title 
{
font-family: "Archivo Black", sans-serif;
font-size: 40px;
font-weight: 600;
margin-bottom: 10%;
color: #5c5c5c;
}

.left-main .todo-wrap .input-form .input-box 
{
width: 90%;
height: 40px; /*50 -> 40*/
border: 0;
border-bottom: 2px solid rgb(255, 255, 255);
font-size: 20px;
margin-bottom: 30px;
background-color:#000;
color: white;
outline-style: none;
}

.content-right 
{
float: left; 
width: 80%;
}

.content-right .day-of-week 
{
background: rgb(255, 255, 255);
width: 100%;
height: 100%;
transform:translate(-20px);
    font-family: "Inter Tight", sans-serif;
  display: flex;
  justify-content: space-between;
  padding: 10px;
}

.content-right .day-of-week .dayHeader 
{
  transform:translate(-10px);
  padding: 10px;
  text-align: center;
  flex: 1;
  margin: 10 5px;
}

.content-right .day-of-week .dayHeader:first-child
{
  margin-left: 0;
}

.content-right .day-of-week .dayHeader:last-child 
{
  margin-right: 0;
}

.content-right .day-of-week .dayHeader.sun 
{
color: #f02f2f;
}

.content-right .day-of-week .dayHeader.sat 
{
color: #2208e7;
}

#weekly > div 
{
font-family: "Inter Tight", sans-serif;
box-sizing: border-box;
text-align: center;
width: calc(100% / 7);
height: 130px;
display: inline-block;
border-bottom: 1px solid #e4e4e4;
vertical-align: top;
padding: 1%;
color: rgb(255, 255, 255);
overflow-y: auto;
}

#weekly > div.active 
{
background: blue;
}

#weekly > div + div
{
border-left: 1px solid #e4e4e4;
}

.calendar-body #weekly > div:first-child 
{
border-left: 1px solid #e4e4e4;
}

.calendar-body #weekly > div:last-child 
{
border-right: 1px solid #e4e4e4;
}

.todoList 
{
margin-top: 10%;
font-size: 20px;
cursor:pointer;
}

.todoList > li 
{
position: relative; 
color:white;
font-family: "Nanum Gothic", sans-serif;
font-weight: 400;
font-style: normal;
}

.todoList > li > span
{
white-space: nowrap;
width: 70%;
overflow: hidden;
display: block;
text-overflow: ellipsis;
}

.todoList > li+li {
margin-top: 5%;
}

.todoList > li > .del-data
{
position: absolute;
top: 0; right: 5%;
width: 20%;
height: 25px;
background: none;
border: none;
font-size: 0px;
}

.todoList > li > .del-data::after, .todoList > li > .del-data::before
{
content: '';
position: absolute;
top : 0; 
left: 50%;
display: block;
width: 4px;
height: 18px;
background: rgb(255, 82, 195);
}

.todoList > li > .del-data::after, .closed::after 
{
transform: rotate(45deg);
}

.todoList > li > .del-data::before, .closed::before
{
transform: rotate(-45deg);
}

.showList 
{
display: none;
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
background: rgb(255, 38, 179);
width: 400px;
height: 300px;
z-index: 1;
border-radius: 20px;
overflow: hidden;
}

.closed {
position: absolute;
top: 5%; right: 5%; 
width: 40px; 
height: 40px;
font-size: 0;
background: none;
border: none;
}

.closed::after, .closed::before {
content: '';
position: absolute;
top: 14%; right: 44%;
width: 3px;
height: 25px;
background: #fff;
}

.listText 
{
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
word-break:break-all;
width: 70%;
font-size: 20px;
color: #fff;
}

.createDate {
position: absolute;
bottom: 7%;
right: 7%;
font-size: 20px;
color: #e4e4e4;
}

.bgblack {
display: none;
background: #acacac;
opacity: 0.6;
position: absolute;
left: 0; right: 0; top: 0; bottom: 0;
}

@media (max-width: 1000px) {
body {
  max-width: 100%;
  padding: 0 10px;
}

header {
  flex-direction: column;
  align-items: center;
}

header > h1 {
  margin-bottom: 20px;
}

.calendar_title {
  flex-direction: row;
  align-items: center;
}

.content-left {
  width: 100%;
  float: none;
  margin-bottom: 20px;
}

.content-right {
  width: 100%;
  float: none;
}

.day-of-week {
  flex-direction: row;
  align-items: center;
}

.dayHeader {
  width: 100%;
  margin: 5px 0;
}

#weekly > div {
  width: calc(100%/7);
  /* display: block; */
  margin-bottom: 5px;
  color:white;
}

.prev { /* 08.05 추가 */
          transform: translate(-100px);
        }

        .next {/* 08.05 추가 */
          transform: translate(-10px);
        }
}









/*
*,
*:before,
*:after {
box-sizing: border-box;
}

html, body {
padding: 0;
margin: 0;
width: 100%;
height: 100%;
}
body {
text-align: center;

background-image: linear-gradient(120deg, #a6c0fe 0%, #f68084 100%);
background-size: cover;
background-repeat: no-repeat;
}
h1,h2,a,p {
font-family: helvetica, sans-serif;
}
h1 {
font-size: 3em;
text-align: center;
color: #00898E;
margin: 0;
padding: 30vh 0 1em;
}

h2 {
text-align: center;
white-space: nowrap;
color: #00898E;
}
a {
text-decoration: none;
color: #fff;
}
p {
text-align: left;
}
.btn {
display: inline-block;
padding: 10px 20px;
border: 2px solid #00898E;
border-radius: 10px;
transition: background .3s;
}
.btn:hover {
background: #00898E;
}
*/







.Popup {
position: fixed;
padding: 10px;
max-width: 500px;
border-radius: 10px;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
background: rgba(255, 255, 255, .9);
visibility: hidden;
opacity: 0;
transition: opacity .5s, visibility 0s linear .5s;
z-index: 1;
}
.Popup.show {
visibility: visible;
opacity: 1;
transition-delay: 0s;
}
.Popup-close {
position: absolute;
padding: 10px;
max-width: 500px;
border-radius: 10px;
top: 50%;
left: 50%;
transform: translate(-50%, -50%);
background: rgba(255, 255, 255, .9);
}
.Popup .close {
position: absolute;
right: 5px;
top: 5px;
padding: 5px;
color: #000;
transition: color .3s;
font-size: 2em;
line-height: .6em;
font-weight: bold;
}
.Popup .close:hover {
color: #00E5EE;
}
.close-popup {
background: rgba(0, 0, 0, .7);
cursor: default;
position: fixed;
top: 0;
left: 0;
right: 0;
bottom: 0;
opacity: 0;
visibility: hidden;
transition: opacity .5s, visibility 0s linear .5s;
}
.close-popup.show {
opacity: 1;
visibility: visible;
transition-delay: 0s;
}
</style>



<body>
  
  
  
  
  
 <!--  -->
  <!-- 
             <div class="COntent">This is the content of div 1.</div>
  <div class="COntent">This is the content of div 2.</div>
  <div class="COntent">This is the content of div 3.</div>
  <div class="COntent">This is the content of div 4.</div>
  <div class="COntent">This is the content of div 5.</div>
  <div class="COntent">This is the content of div 2.</div> 중복된 텍스트
  <div class="COntent">This is the content of div 1.</div> 중복된 텍스트

  <script>
    function checkForDuplicates() {
        // 모든 클래스가 "COntent"인 div 요소 선택
        const elements = document.querySelectorAll('.COntent');
        
        // 요소의 텍스트를 배열에 저장
        const textArray = Array.from(elements).map(element => element.innerText.trim());

        // 중복된 텍스트를 확인하기 위한 Set 사용
        const textSet = new Set(textArray);

        // 배열 길이와 Set 길이 비교
        if (textArray.length !== textSet.size) {
            console.log('중복된 텍스트가 있습니다.');
        } else {
            console.log('중복된 텍스트가 없습니다.');
        }

        // 중복된 텍스트 요소 출력
        const duplicates = findDuplicates(textArray);
        console.log('중복된 텍스트:', duplicates);

        // 중복된 텍스트 수 출력
        console.log('중복된 텍스트의 수:', duplicates.length);
    }

    // 배열 내 중복 요소 찾는 함수
    function findDuplicates(arr) {
        const seen = new Map();
        const duplicates = new Set();
        for (const item of arr) {
            if (seen.has(item)) {
                duplicates.add(item);
            } else {
                seen.set(item, true);
            }
        }
        return Array.from(duplicates);
    }

    // 페이지 로드 시 중복 확인 함수 호출
    document.addEventListener('DOMContentLoaded', checkForDuplicates);
  </script>
-->
  
  
  
  
  
  
<div id = "wrap_calendar" class = wrap_calendar>
<header>
  <h1>
    <span>KKSC_Calendar</span>
  </h1>
  





  <!-- 헤더 카피 start -->
  <div id="menu-list" class="menu-list">
    <!-- [L] :: 임시 메뉴 항목입니다.  -->
    <div id="menu-item-1" class="menu-item">
      <a href="/page/index.html"> 
        동아리 소개
      </a> 
    </div>
    <div id="menu-item-2" class="menu-item"><a href="/page/index.html">모집 분야</a></div>
    <div id="menu-item-3" class="menu-item"><a href="/page/calendar.html">캘린더</a></div>
    <div id="menu-item-4" class="menu-item"><a href="../board.html">게시판</a></div>
    <div id="menu-item-5" class="menu-item"><a href="/page/index.html">지원하기</a></div>
  </div>
<!-- 헤더 카피 end -->






  <div class="calendar_title">
    <button class="prev"
            style = >
      <span class="material-symbols-outlined">
        arrow_back
      </span>
      
      
      
      <!-- 모바일 아이콘 해결방법 : span 부분 싹 주석처리하고  -->
    
    
    
    </button>
    
    <span class="current-year-month">
      
    </span>
    
    <button class="next"
            style = >
      <span class="material-symbols-outlined">
        arrow_forward
      </span>
    </button>
  </div>
</header>

<section class="content-left">
  <div class="left-main">
    <div class="main-wrap">

    </div>
    
    <div class="todo-wrap">
      <div class="todo-title">
        Work of KKSC
      </div>
      
      <form class="input-form">
        <input type="text" placeholder="" class="input-box" />
        
        <button type="submit" class="input-btn">
          INPUT
        </button>

        <div id="wrapper2" class = "wrapper2">
        <a>
          <a class="Button" href="#popup">
          참가신청
          </a>    
        </a>
        </div>

        <div id="popup" class="overlay">
          <a class="cancel" href="#">
    
          </a>
	      <div class="popup">
		      <h2>
            Event Registration
          </h2>
		      <a class="close" href="#">
            &times;
          </a>
		      <div class="content">
            <div class = "event_name">
            Event name : 
            </div>
            
            <div class = "today">
              today : 
              <br>
            </div>
            
            <!--<div class = "PArticipation">
            Member of participation : 
              // Number of participants : 참가인원 수
            </div> -->
            
	          <form>
              <input type="text" id="userName" />
              <button id="userButton" type="button">Add</button>
            </form>
            <div id="nameList">
      
            </div>
		      </div>
	      </div>
        </div>
      </form>
      
      <ul class="todoList">
        
        
        <!-- 일정 겹치는거 제한 -->
        <!--
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
        <li>Item 4</li>
        <li>Item 5</li>
        <li>Item 2</li>
        <li>Item 1</li>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const listItems = document.querySelectorAll('li');

            // 모든 li 요소의 텍스트 내용을 읽어서 배열에 저장
            const texts = Array.from(listItems).map(item => item.textContent.trim());

            // 중복된 텍스트 찾기
            const seen = new Set();
            const duplicates = new Set();
            texts.forEach(text => {
                if (seen.has(text)) {
                    duplicates.add(text);
                } else {
                    seen.add(text);
                }
            });

            // 중복된 텍스트가 있을 경우 콘솔에 출력 및 요소에 스타일 적용
            if (duplicates.size > 0) {
                console.log('중복된 텍스트가 있습니다.');
                console.log('중복된 텍스트:', Array.from(duplicates));
                console.log('중복된 텍스트의 수퍼노바:', duplicates.size);

                listItems.forEach(item => {
                    if (duplicates.has(item.textContent.trim())) {
                        item.classList.add('duplicate');
                    }
                });
            } else {
                console.log('중복된 텍스트가 없습니다.');
            }
        });
    </script>
-->
        
        
       
      </ul>
      
      <div class="showList">
        <span class="listText">
          
        </span>
        
        <span class="createDate">
          
        </span>
        
        <button class="closed">
          
        </button>
      </div>
    </div>
  </div>
</section>
  
<section class="content-right">
    <div class="day-of-week">
      <div class="dayHeader sun">
        Sun
      </div>
      <div class="dayHeader">
        Mon
      </div>
      <div class="dayHeader">
        Tue
      </div>
      <div class="dayHeader">
        Wed
      </div>
      <div class="dayHeader">
        Thu
      </div>
      <div class="dayHeader">
        Fri
      </div>
      <div class="dayHeader sat">
        Sat
      </div>
    </div>
    
    <div class="calendar-body">
      
    </div>
  
  
  
  <!--
<button id="showPopupBtn">Show Popup</button>

    <div id="Popup1" class="Popup">
        <a href="#" class="close" id="closePopupBtn">&times;</a>
        This is a popup!
    </div>
    <div id="overlay" class="close-popup"></div>
  
  -->
</section>
</div> 
  
<script>
  var isBool;
  var isButton = true;
  let today = new Date();
var spanEl2; // 원래 const였음, 여기 선언도 아님
let currentDate;
var participation_member;
var participation_member_full;
var isPM = 1; //오류 없을라나
var isPM2 = 1; //오류 없을라나


const event_name = document.querySelector('.event_name');
const Today = document.querySelector('.today');

let DATA = {
  // todolist 목록
  
};

Date.prototype.format = function () {
  var yyyy = this.getFullYear();
  var month = (this.getMonth() + 1);
  var dd = this.getDate();
  var format = [yyyy, month, dd].join('-');
  return format;
}

Date.prototype.format2 = function () {
  var yyyy = this.getFullYear();
  var month = (this.getMonth() + 1);
  var format = [yyyy, month].join('-');
  return format;
}



//main.js 확인 완료
window.onload = function () {
const calendarBody = document.querySelector('.calendar-body');
const prevEl = document.querySelector('.prev');
const nextEl = document.querySelector('.next');
const inputBox = document.querySelector('.input-box');
const inputBtn = document.querySelector('.input-btn');
const inputList = document.querySelector('.todoList');
const showList = document.querySelector('.showList');
const listText = document.querySelector('.listText');
const createDate = document.querySelector('.createDate');
const bgblack = document.querySelector('.bgblack'); // 없앴다가 살린거
const closedBtn = document.querySelector('.closed'); // 없앴다가 살린거
// let currentDate;

  
  
  /*추가한 내용
  function setDefaultTodosForDate(date) {
    // 기본 값 설정
    const defaultTodos = [
        { id: 1, todo: "기본 할 일 1" },
        { id: 2, todo: "기본 할 일 2" },
        { id: 3, todo: "기본 할 일 3" }
    ];

    // DATA 객체에 기본 할 일 목록 추가
    DATA[date] = defaultTodos;

    // 로컬 스토리지에 저장
    localStorage.setItem(date, JSON.stringify(DATA[date]));

    // UI 업데이트
    updateUI();
}
*/
  
  
  
buildCalendar();
function buildCalendar() {
  let firstDate = new Date(today.getFullYear(), today.getMonth(), 1);
  const monthList = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  const leapYear = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  const notLeapYear = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  const headerYear = document.querySelector('.current-year-month');
  
  if (firstDate.getFullYear() % 4 === 0) {
    pageYear = leapYear;
  } 
  
  else {
    pageYear = notLeapYear;
  }
  
  headerYear.innerHTML = `${monthList[firstDate.getMonth()]}&nbsp;&nbsp;&nbsp;&nbsp;${today.getFullYear()}`;
  makeElement(firstDate);
  // currentDateget();
  // showMain();
  currentDate = today.format();
  resetInsert();
  // setDefaultTodosForDate(today.format());
}

  /*
  function showMain() {
  const mainDay = document.querySelector('.main-day');
  const mainDate = document.querySelector('.main-date');
  const dayList = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  mainDay.innerHTML = dayList[today.getDay()];
  mainDate.innerHTML = today.getDate();
}
*/
  
function makeElement(firstDate) {
  let weekly = 100;
  let dateSet = 1;
  for (let i = 0; i < 5; i++) {
    let weeklyEl = document.createElement('div');
    weeklyEl.setAttribute('class', weekly);
    weeklyEl.setAttribute('id', "weekly");
    for (let j = 0; j < 7; j++) 
    {
      if (i === 0 && j < firstDate.getDay() || dateSet > pageYear[firstDate.getMonth()]) 
      {
        let dateEl = document.createElement('div');
        weeklyEl.appendChild(dateEl);
      } 
      
      else 
      {
        let dateEl = document.createElement('div');
        dateEl.textContent = dateSet;
        dateEl.setAttribute('class', dateSet);
        dateEl.setAttribute('id', `${today.format2()}-${dateSet}`);
        weeklyEl.appendChild(dateEl);
        dateSet++;
      }
    }
    weekly++; calendarBody.appendChild(weeklyEl);
  }
// let clickedDate = document.getElementsByClassName(today.getDate());
  // clickedDate[0].classList.add('active');
}

function removeCalendar() {
  let divEls = document.querySelectorAll('.calendar-body > #weekly > div');
  for (let i = 0; i < divEls.length; i++)   {
    divEls[i].remove();
  }
}

/*
function currentDateget() {
  // format()을 이용해서 현재 날짜를 보기좋게 출력해주기 위해 사용.
  currentDate = today.format();
}
*/
  
  
  
  // 이벤트 네임 추가하기 - calendarbody function 코드 비슷한가 비교!!
function updateCalendar() {
  
  // alert("수행");
  let event_name = document.querySelector('.event_name'); 
  // event_name 요소 선택
  event_name.innerHTML = ''; 
  // 기존 내용을 비움
          
  if (DATA[currentDate]) 
  {
    for (let i = 0; i < DATA[currentDate].length; i++) 
    {
      // event_name.innerHTML = "event name : " + DATA[currentDate][i].todo + '<br>'; 
      event_name.innerHTML += DATA[currentDate][i].todo + '<br>'; 
        // 원본 코드
        // 각 일정을 새로운 줄에 추가
      
      
      // 모든 li 요소 선택
        const listItems = document.querySelectorAll('li');

        // 모든 li 요소의 텍스트 내용을 읽어서 배열에 저장
        const texts = Array.from(listItems).map(item => item.textContent.trim());

        // 텍스트 내용을 콘솔에 출력
        console.log("texts : " + texts);

        // 각 li 요소의 텍스트 내용을 개별적으로 출력
        texts.forEach(text => {
            console.log("texts : " + text);
        });
      
      
    }
  } 
      
  else 
  {
    event_name.innerHTML = "일정 없음";
  }
  console.log(event_name.innerHTML);
}
  // setInterval(updateCalendar, 5000);
  
  function cle() {
localStorage.clear();
  }
  cle();
// 예제 데이터 추가
DATA['2024-8-2'] = [
  { id: 1, todo: 'KKSC 회의' },
];

DATA['2024-8-9'] = [
  { id: 2, todo: 'KKSC 웹 완성' },
];


// 로컬 스토리지에 저장
localStorage.setItem('2024-8-2', JSON.stringify(DATA['2024-8-2']));
localStorage.setItem('2024-8-9', JSON.stringify(DATA['2024-8-9']));

cle();
  
prevEl.addEventListener('click', function () {
  today = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
  removeCalendar();
  buildCalendar();
  resetInsert();
  redrawLi(); // 세미콜론 붙임
});
  
nextEl.addEventListener('click', function () {
  today = new Date(today.getFullYear(), today.getMonth() + 1, today.getDate());
  removeCalendar();
  buildCalendar();
  resetInsert();
  redrawLi(); // 세미콜론 붙임
});

calendarBody.addEventListener('click', function (e) {
  // 특정 날짜에 기본 값을 설정하는 함수 호출 예시
// setDefaultTodosForDate(currentDate);


      // 수정 + 백엔드 사용 + 겹치는거 관리
        // 모든 li 요소 선택
        // 모든 li 요소 선택
        const listItems = document.querySelectorAll('li');

        // 모든 li 요소의 텍스트 내용을 읽어서 배열에 저장
        const texts = Array.from(listItems).map(item => item.textContent.trim());

        // 텍스트 내용을 콘솔에 출력
        console.log("calendar body click : " + texts);

        // 각 li 요소의 텍스트 내용을 개별적으로 출력
        texts.forEach(text => {
            console.log("calendar body click foreach : " + text);
        });
  

  if (isPM2 === 0) {
            // 관리자일 때 (PM만) : INPUT와 참가 신청 모두 쓸 수 있음.
  // 회원일 때 : 참가신청만 쓸 수 있음.
  // 회원이 아닐 때 : 모두 쓸 수 없; 음.
  // 관리자 (if : 2), 회원 (else if : 1), 준회원 (else : 0) 구분
          // alert("접근 권한이 없습니다.");
          event_name.innerHTML = "접근 권한이 없습니다.";
          }

          else {
            event_name.innerHTML = texts;
            // 텍스트 내용 가져오기
            // let spanTextContent = spanEl2.textContent;
            
            //event_name.innerHTML = spanTextContent;
          }
  
  
  
  let target = e.target;
  // console.log(target); // 날짜가 나온다!! 어딘간 활용할듯!!
  let eachDate = document.querySelectorAll('.calendar-body > #weekly > div');
  // if (e.target.innerHTML === '') return;
  for (let i = 0; i < eachDate.length; i++) 
  {
   eachDate[i].classList.remove('active');
   isBool = false;
  } 
  isBool = true;
  target.classList.add('active');
  today = new Date(today.getFullYear(), today.getMonth(), target.innerHTML);
  // showMain();
  // currentDateget();
  currentDate = today.format();
  redrawLi();
  resetInsert();
});

inputBtn.addEventListener('click', function (e) {
  
  // 관리자일 때 (PM만) : INPUT와 참가 신청 모두 쓸 수 있음.
  // 회원일 때 : 참가신청만 쓸 수 있음.
  // 회원이 아닐 때 : 모두 쓸 수 없; 음.
  //관리자 (if : 2), 회원 (else if : 1), 준회원 (else : 0) 구분
  if (isPM === 0) {
    alert("접근 권한이 없습니다.");
  }
  
  else {
    if(isButton) {
      alert("InputBtn 내 isButton : " + isButton);
      e.preventDefault();
      let inputValue = inputBox.value;
      insertTodo(inputValue);
      isButton = false;
    }
    else {
      alert("InputBtn 내 isButton : " + isButton);
    }
  }
  
});

closedBtn.addEventListener('click', function(e){
  showList.style.display = "none";
  // bgblack.style.display = "none";
});

function insertTodo(text) {
  let todoObj = {
    todo: text,
  }
  
  if (!DATA[currentDate]) 
  {
    // 하나씩 분리된 일정들!!
    DATA[currentDate] = [];
    DATA[currentDate].push(todoObj);
    console.log(DATA[currentDate]);
    isButton = true;
    alert("isButton : " + isButton);
  } 
  
  else 
  {
    DATA[currentDate].push(todoObj);
    console.log(DATA[currentDate]);
    isButton = false;
    alert("isButton : " + isButton);
  }
  const liEl = document.createElement('li');
  const spanEl = document.createElement('span');
  const delBtn = document.createElement('button');
  // delBtn.innerText = "DEL";
  delBtn.setAttribute('class', 'del-data');
  liEl.setAttribute('id', DATA[currentDate].length);
  spanEl.innerHTML = text;
  liEl.appendChild(spanEl);
  liEl.appendChild(delBtn);
  inputList.appendChild(liEl);
  
  
  // 수정
  const editBtn = document.createElement('button');
  editBtn.innerText = "EDIT";
  liEl.appendChild(editBtn);
  editBtn.addEventListener('click', () => re(liEl.id));

  delBtn.addEventListener('click', delWork);
  liEl.addEventListener('dblclick', showTodo);
  todoObj.id = DATA[currentDate].length;
  localStorage.setItem(currentDate, JSON.stringify(DATA[currentDate]));
  inputBox.value = '';
}

  
  //수정
function re(id) {
  const newText = prompt("Enter the new text:");
  if (newText) {
    const todoItem = DATA[currentDate].find(item => item.id === parseInt(id));
    if (todoItem) {
      todoItem.todo = newText;
      localStorage.setItem(currentDate, JSON.stringify(DATA[currentDate]));
      updateUI();
    }
  }
}


  //수정 
function updateUI() {
  inputList.innerHTML = '';
  DATA[currentDate].forEach(item => {
    const liEl = document.createElement('li');
    const spanEl = document.createElement('span');
    const delBtn = document.createElement('button');
    const editBtn = document.createElement('button');
    
    // delBtn.innerText = "DEL";
    delBtn.setAttribute('class', 'del-data');
    editBtn.innerText = "EDIT";
    
    liEl.setAttribute('id', item.id);
    spanEl.innerHTML = item.todo;
    
    liEl.appendChild(spanEl);
    liEl.appendChild(delBtn);
    liEl.appendChild(editBtn);
    inputList.appendChild(liEl);
    
    delBtn.addEventListener('click', delWork);
    editBtn.addEventListener('click', () => re(item.id));
    liEl.addEventListener('dblclick', showTodo);
  });
}

function redrawLi() {
  alert(currentDate);

  // 모든 <li> 요소를 제거합니다. - 새로 추가된듯?
  let liEls = document.querySelectorAll('li');
  liEls.forEach(li => inputList.removeChild(li));

  // 현재 날짜에 맞는 데이터를 화면에 렌더링합니다.
  if (DATA[currentDate]) {
    DATA[currentDate].forEach(todo => {
      const liEl = document.createElement('li');
      const spanEl = document.createElement('span');
      const delBtn = document.createElement('button');

      delBtn.setAttribute('class', 'del-data');
      spanEl.innerHTML = todo.todo;
      liEl.appendChild(spanEl);
      liEl.appendChild(delBtn);
      liEl.setAttribute('id', todo.id);
      inputList.appendChild(liEl);

      delBtn.addEventListener('click', delWork);
      liEl.addEventListener('dblclick', showTodo);

      // 특정 날짜에 대해 텍스트를 변환 - 이거만 추가된듯
      if (currentDate === '2024-8-2') {
        spanEl.innerText = 'KKSC 회의'; // 원하는 텍스트로 변경
      }
    });
  }
}

function resetInsert() {
  let storeObj = localStorage.getItem(currentDate);
  if (storeObj !== null) {
    let liEl = document.querySelectorAll('LI');
    
    for (let i = 0; i < liEl.length; i++)     {
      inputList.removeChild(liEl[i]);
    }
    const parsed = JSON.parse(localStorage.getItem(currentDate));
    
    parsed.forEach(function (todo) {
      if (todo) {
        let lili = document.createElement('li');
        let spanspan = document.createElement('span');
        let deldel = document.createElement('button');
        deldel.setAttribute('class', 'del-data');
        // deldel.innerText = "DEL";
        lili.setAttribute('id', todo.id);
        spanspan.innerHTML = todo.todo;
        lili.appendChild(spanspan);
        lili.appendChild(deldel);
        inputList.appendChild(lili);
        deldel.addEventListener('click', delWork);
        lili.addEventListener('dblclick', showTodo);
      }
    });
  }
}
resetInsert();

function delWork(e) {
  e.preventDefault();
  let delParentLi = e.target.parentNode;
  inputList.removeChild(delParentLi);
  const cleanToDos = DATA[currentDate].filter(function (todo)     {
    return todo.id !== parseInt(delParentLi.id);
  });
  DATA[currentDate] = cleanToDos;
  // save();
  localStorage.setItem(currentDate, JSON.stringify(DATA[currentDate]));
}

function showTodo(e){
  showList.style.display = "block"; 
  // bgblack.style.display = "block"; 
  listText.textContent = e.target.textContent; // 수정에 활용
  
  
  
  const elementId = e.target.id;
  console.log("Element ID:", elementId);
  
  
  // console.log("수정");
  // listText.textContent = "dasd";
  
  
  // createDate.textContent = currentDate;
}
  
  
  
  
  
  
  
  var inp = document.querySelector('#userName');
var but = document.querySelector('#userButton');
var namelist = document.querySelector('#nameList');

// .wrapper2 클래스를 가진 요소를 선택
    const wrapper = document.querySelector('.wrapper2');
    
    if (wrapper) {
      // 클릭 이벤트 리스너 추가
      wrapper.addEventListener('click', function() {
        if (Today && isBool) {
          
          
          if (isPM2 === 0) {
            // 관리자일 때 (PM만) : INPUT와 참가 신청 모두 쓸 수 있음.
  // 회원일 때 : 참가신청만 쓸 수 있음.
  // 회원이 아닐 때 : 모두 쓸 수 없; 음.
  // 관리자 (if : 2), 회원 (else if : 1), 준회원 (else : 0) 구분
          // alert("접근 권한이 없습니다.");
          Today.innerHTML = "접근 권한이 없습니다.";
          }

          else {
            Today.innerHTML = currentDate;
            // 텍스트 내용 가져오기
            // let spanTextContent = spanEl2.textContent;
            
            //event_name.innerHTML = spanTextContent;
          }
        }  
          
        else {
            console.error('.today 클래스를 가진 요소를 찾을 수 없습니다.');
          }
        
      });
    } 
    else {
      console.log('.wrapper2 클래스를 가진 요소를 찾을 수 없습니다.');
    }

function del(){
  var cla = document.querySelectorAll('.num'); 
  for(var i = 0; i < cla.length; i++){
    cla[i].addEventListener('click', function(){
        console.log(this);
        if(this.parentNode){
          this.parentNode.remove();
        }
    })
  }
};

but.addEventListener('click', function (e) {
  e.preventDefault(); // 폼 제출 방지

    if(inp.value != null) 
    {
      
    
      // 이벤트 네임, 이름, 날짜 표시
    var p = document.createElement('p');
    namelist.appendChild(p);
    p.textContent = inp.value + " " + currentDate + " " + event_name.innerHTML; // 수정되서 커밋 쓰기 (today -> format로 한 번 더 수정됨)
    var span = document.createElement('span');
    p.appendChild(span);
    span.textContent = ' X';
    span.setAttribute('class', 'num');
    inp.value =''; //없앰
    
      
      /*
       // 유효성 검사 2
       // 새로 추가한 내용
      var i = 0;
      var paragraphs = document.getElementsByTagName('p');
      var text = paragraphs[i].textContent;
      alert(text);
      i++;
      if (paragraphs[i].textContent === paragraphs[i-1].textContent) {
        alert("같애");
      }
      */
      
      
    inp.focus();
    namelist.insertBefore(p, namelist.childNodes[0]);
    }
  del();
});


/*
// 보내기 ()
// 사용 링크 : https://fansor.tistory.com/13
fetch(url, options)
  .then((response) => console.log("response:", response))
  .catch((error) => console.log("error:", error));

//GET 요첟
fetch("localhost:3000/api/user")
  .then((response) => response.json())
  .then((data) => console.log(data));

//POST 요청
fetch("localhost:3000/api/user", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify({
    loginId: "id",
    password: "1234",
  }),
})
  .then((response) => response.json())
  .then((data) => console.log(data));

//PUT 요청
fetch("localhost:3000/api/user", {
  method: "PUT",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify({
    loginId: "id",
    password: "1234",
  }),
})
  .then((response) => response.json())
  .then((data) => console.log(data));

//DELETE 요청
fetch("localhost:3000/api/user", {
  method: "DELETE",
})
  .then((response) => response.json())
  .then((data) => console.log(data));
*/



/*
// 가져오기 ()
// 사용 링크
// 1. https://jsonplaceholder.typicode.com/
// 2. https://jsonplaceholder.typicode.com/posts
// 3. https://myeongsu0257.tistory.com/123
const getData = async () => {
    try {
        const response = await fetch("https://jsonplaceholder.typicode.com/posts"); 
        // https://jsonplaceholder123.typicode.com/posts로 쓰면 catch문에서 걸림
        const data = await response.json();
        console.log(data);
    } catch (error) {
        console.log(`error : ${error}`);
    }
};

getData();
*/


















// 새로 추가한 내용 - 오류에 대한 팝업 출력

var isTrue = false;

if (isTrue) {
document.getElementById('showPopupBtn').addEventListener('click', function() {
  
  
  
    // a.close 요소 선택
    // const closeBtn = document.querySelector('a.close');
    // 텍스트 내용 변경
    // closeBtn.innerText = '닫기';
  
  
  
    document.getElementById('Popup1').classList.add('show');
    document.getElementById('overlay').classList.add('show');
});

document.getElementById('closePopupBtn').addEventListener('click', function() {
    document.getElementById('Popup1').classList.remove('show');
    document.getElementById('overlay').classList.remove('show');
});

document.getElementById('overlay').addEventListener('click', function() {
    document.getElementById('Popup1').classList.remove('show');
    document.getElementById('overlay').classList.remove('show');
});
}
  
  
  
  
  
}

/*
function save() {
  localStorage.setItem(currentDate, JSON.stringify(DATA[currentDate]));
}
*/
</script>


</html>
